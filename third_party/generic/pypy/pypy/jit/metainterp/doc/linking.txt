==============================================================
Linking between the interpreter, the JIT, and the machine code
==============================================================

In a pypy-c that contains a generated JIT, the execution of app-level
code initially uses the normal interpreter, but invokes the JIT if the
JUMP_ABSOLUTE bytecode is seen often enough (it's the bytecode that
closes an app-level loop).  This part of the code of pypy-c looks like
this (in pseudo-C code coming from RPython)::

    void dispatch_JUMP_ABSOLUTE(Frame *frame, int arg)
    {
        frame->next_op = arg;
        can_enter_jit(frame);
    }

    void can_enter_jit(Frame *frame)
    {
        if (!position_seen_often_enough(frame->f_code, frame->next_op))
            return;
        machine_code_ptr = lookup_machine_code_for(frame->f_code,
                                                   frame->next_op);
        machine_code_ptr(frame);
        /* at this point, the machine code has updated the frame
           so that it points to the next bytecode to execute */
    }

The jit_compile() function comes from RPython sources written in the
JIT support code (warmspot.py).  It does tracing and generally ends up
compiling an extra loop to machine code.

Then jit_compile() itself needs to transfer execution to the newly
compiled loop.  Instead of calling the loop, jit_compile() returns a
small data structure (a continuation) that points to the loop and
contains values for the input arguments.  A pointer to this data arrives
in REG3 in the guard recovery code, which contains the necessary
assembler to set up the real registers and actually jump to the loop.

The reason to organize the control flow transfers in this way is because
when the jit_compile() function executes, the frame from the machine
code is always still available -- it is below in the stack.  The machine
code didn't do a RET before it CALLed the JIT.  This has two advantages.
First, it lets the JIT read values directly out of the old frame, to
find the values that were current when the guard failed.  Second, it
tells the JIT where the *next* machine code frame will be: it will be at
the same position as the old frame (because the machine code and the
guard recovery code just jump to each other).  This is useful to
implement virtualizables: a virtualizable object living in the heap
(e.g. a PyFrame instance in pypy-c) needs to contain a pointer to the
machine code frame's base pointer, and the cleanest approach is to let
the JIT write this pointer into the virtualizable heap object just
before it lets the guard recovery code transfer control to the machine
code.
