========================
Getting Started With Git
========================

:X-Tags: Howto, Git
:Abstract:

    All of our source code is managed through the use of the `Git
    <http://git-scm.com/>`_ version control system and thus it is recommended
    that all developers familiarise themselves with its use.

.. contents::   Table of Contents
                :depth: 2
                :backlinks: none

--------
Why Git?
--------

The main reason that we've decided to use Git is because of `GitHub
<http://github.com>`_, which -- unlike predecessors like `Sourceforge
<http://sourceforge.net/>`_ or `Google Code <http://code.google.com/>`_ --
recognises that coding is very much a social endeavour and provides a number of
features to facilitate this.

The GitHub home page gives a reasonable indication of the goodies that await
you:

.. raw:: html

  <div class="center">
    <img
      src="http://cloud.github.com/downloads/tav/plexnet/gfx.espians.github.overview.png"
      width="700px" height="479px" />
  </div>

Git is also a `distributed version control system
<http://en.wikipedia.org/wiki/Distributed_revision_control>`_ (DVCS) and allows
for decentralised development without much hassle. Not only does this reflect
the Plexnet ethos, but it paves the way for an eventual PlexSource system.

Git also outshines centralised version control system like `Subversion
<http://subversion.tigris.org/>`_ in terms of performance:

::

  $ time git log > /dev/null
  0.352s

::

  $ time svn log > /dev/null
  3.709s

Git is space efficient too. For example, the Git clone of the Django project is
smaller than a Subversion checkout!! This is surprising because the Git clone
has the *entire* repository history with *every* revision, whilst the Subversion
checkout is only of a *single* revision!

::

  $ du -d 1 -h
  108M  ./django-bzr
   44M  ./django-git
   53M  ./django-hg
   53M  ./django-svn

As for other competing DVCS systems, the one that is comparable to Git is the
`Mercurial <http://www.selenic.com/mercurial/>`_ distributed version control
system. Mercurial has the nice feature of being coded entirely in Python and
being very extendable.

And feature-wise, Git and Mercurial are very similar. In fact their object
models are pretty identical. However, besides lacking a decent GitHub
equivalent, Mercurial also currently lacks two really nice features of Git:

* Super cheap/quick branching
* Rebasing

Eventually Mercurial may fix its broken branching model, but for now Git shines
amongst the current flock of DVCS. And GitHub, with its social focus, makes it a
true pleasure to use.

Having said all this, Git's user interface sucks -- the worst of it are the
appalling error messages it gives you. Thankfully this has gotten better in the
1.6.x version and hopefully will continue to get better with time...

-----------
First Steps
-----------

If you don't have an account already, go sign up on `GitHub
<http://github.com>`_. It only takes a minute and they provide a very generous
`free account <https://github.com/signup/free>`_. Whilst a pain, please also add
a profile image for the email address you signed up with on `Gravatar
<http://www.gravatar.com/>`_. And, finally, upload your SSH key there and you're
all set to go!

The next step is to install Git if you don't already have it. It is RECOMMENDED
that you install the 1.6.x version of Git as its user interface is much much
better:

* http://git-scm.com/download

Then tell Git who you are -- this is used in commit messages, so provide the
real info::

  git config --global user.name 'tav'
  git config --global user.email tav@espians.com

Behind the scenes this will update your ``~/.gitconfig`` file. You might also
want to extend this file with something like the following:

  .. syntax:: ini

    [user]
        email = tav@espians.com
        name = tav
    [color]
        diff = auto
        status = auto
        branch = auto
        interactive = auto
        ui = auto
    [github]
        user = tav
        token = 0cc175b9c0f1b6a831c399e269772661
    [alias]
        ch = checkout
        co = commit
        st = status
        lp = log -p
        diffall = diff HEAD
        diffstaged = diff --staged
        graph = log --pretty=oneline --graph
        filelog = log --pretty=oneline --no-merges --
        origin = push origin master
        unstage = reset HEAD
    [core]
        webKitBranchBuild = true
        plexnetBranchBuild = true

The ``[color]`` section provides colour output when you run various git commands
which can be quite useful.

The ``[alias]`` section allows you to alias shortcuts, e.g. with the above alias
definition, you can now just run ``git graph`` instead of the full ``git log
--pretty=oneline --graph``. In combination with the git `bash completion
<http://www.simplicidade.org/notes/archives/2008/02/git_bash_comple.html>`_
script, aliases will make life much easier for your fingers.

The ``[github]`` section is used by special GitHub powered tools -- you can find
your token on your `GitHub account <https://github.com/account>`_ page. One
GitHub powered tool that's super cool is `Gist <http://gist.github.com/>`_ --
the best pastebin out there, with all of your pastes automatically becoming git
repositories! Gist also has a number of command line and editor interfaces:

* `Gist command-line (Ruby version)
  <http://github.com/defunkt/gist/tree/master>`_

* `Gist command-line (Python version)
  <http://github.com/davglass/gist/tree/master>`_

* `Emacs M gist-buffer@ support <http://github.com/defunkt/gist.el>`_

* `Vim :Gist support <http://github.com/mattn/gist-vim/tree/master>`_

And, finally, the ``core.webKitBranchBuild = true`` and
``core.plexnetBranchBuild = true`` respectively tells the various WebKit and
Plexnet build scripts to append the name of the git branch you are in to the
build directory. This is especially useful so you don't clobber your previous
branch's build when you switch branches.

-------------------
Espian Repositories
-------------------

To simplify the development process, we are currently using centralised
repositories which all core developers have write access to. The main
repositories are:

* http://github.com/tav/plexnet/
* http://github.com/tav/webkit_titanium/

If you would like write access, just ask `tav <http://tav.espians.com>`_. If
you're not a core developer, you can simply fork the project. GitHub makes this
very easy and you can send us `pull requests
<http://github.com/guides/pull-requests>`_ with any changes you'd like us to
merge.

Note: The above are the links to the project pages on GitHub. To clone the
repositories you'd need to use the special Git URIs. Whilst Git does support
HTTP access, accessing Git repositories over HTTP is quite a poor experience.

-------
Cloning
-------

One usually starts off by cloning a Git repository. GitHub provides two
different repository URIs -- one is read-only and the other provides read/write
access. For example, if we take the Plexnet repository, the URIs are::

  git://github.com/tav/plexnet.git    # read-only
  git@github.com:tav/plexnet.git      # read/write

So, if you had read/write access, you'd clone the repository by running::

  $ git clone git@github.com:tav/plexnet.git

This will create a ``plexnet`` directory in whatever directory you executed the
command in and grab a copy of the repository for you, e.g.

::

  Initialized empty Git repository in /Users/tav/plexnet/.git/
  remote: Counting objects: 7778, done.
  remote: Compressing objects: 100% (5837/5837), done.
  Receiving objects:   7% (545/7778), 1.47 MiB | 366 KiB/s     

Once the command has finished running, you'll find that there's a fresh
"checkout" of the repository inside the plexnet directory. You'll also find a
special ``.git`` directory which actually contains the repository (config,
objects and metadata).

Of special note is the ``.git/config`` file which will look something like:

  .. syntax:: ini

    [core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
        ignorecase = true
    [remote "origin"]
        fetch = +refs/heads/*:refs/remotes/origin/*
        url = git@github.com:tav/plexnet.git
    [branch "master"]
        remote = origin
        merge = refs/heads/master

What Git has effectively done is:

* Grab a copy of the repository.

* Setup a new ``remote`` reference called ``origin`` which points to the
  original repository.

* Linked your local ``master`` branch to the master branch on origin.

Having a remote named "origin" and a branch named "master" is just the default
Git convention -- you can name your remotes and branches however you want.

-------
Remotes
-------

Remotes are just references to other repositories. In Git you are always
operating and committing on your *local* repository. Interaction with remote
repositories is generally limited to simply fetching/pushing changes.

And since these remotes are in relation to just *your* local repository, you can
set up as many of these as is relevant without affecting anyone else's setup.
Now you might wonder why you need multiple remotes to be configured. For this,
let's take a look at the ``webkit_titanium`` repository.

Our `webkit_titanium <http://github.com/tav/webkit_titanium/>`_ repository is
actually a fork of:

* http://github.com/appcelerator/webkit_titanium

Just like other developers would have to with our respositories, we had to fork
``appcelerator/webkit_titanium`` since we only have read-only access to it. So
when we run the following we don't actually have any references to the original
Appcelerator repository::

  $ git clone git@github.com:tav/webkit_titanium.git

The ``.git/config`` in the newly created repository directory would have
something like the following in it:

  .. syntax:: ini

    [remote "origin"]
        url = git@github.com:tav/webkit_titanium.git
        fetch = +refs/heads/*:refs/remotes/origin/*

Now if a developer wants to keep an eye on changes that Appcelerator make -- and
possibly bring in some of those changes into our repository -- they should setup
a new remote for it on *their* local repository.

So let's call this new remote ``upstream`` and point it at the read-only
reference for the Appcelerator repository::

  $ git remote add upstream git://github.com/appcelerator/webkit_titanium.git

The ``.git/config`` would now have a few additional lines:

  .. syntax:: ini

    [remote "upstream"]
        url = git://github.com/appcelerator/webkit_titanium.git
        fetch = +refs/heads/*:refs/remotes/upstream/*

You can see a list of remotes you've setup by running::

  $ git remote show
  origin
  upstream

And get further detail on them using::

  $ git remote show origin
  * remote origin
    URL: git@github.com:tav/webkit_titanium.git
    HEAD branch: titanium_pr4
    Remote branches:
      master                 tracked
      titanium_1.0           tracked
      titanium_1.0_win32_osx tracked
      titanium_pr4           tracked
    Local branch configured for 'git pull':
      master merges with remote master
    Local ref configured for 'git push':
      master pushes to master (up to date)

The previous command does a remote query over the network, you can pass an
additional ``-n`` parameter to just use the cached data instead, i.e.

::

  $ git remote show -n origin



-----------
Ignore This
-----------

Branches
========

Similarly, we can see a list of local branches::

  $ git branch
  * master

$ git branch -r
  origin/HEAD -> origin/master
  origin/master

And all (local and remote) branches::

  $ git branch -a
  * master
    remotes/origin/HEAD -> origin/master
    remotes/origin/master

Basic Workflow
==============

.. image:: http://cloud.github.com/downloads/tav/plexnet/gfx.espians.git.staging.png
           :class: float-right

Git's workflow is quite different to traditional systems like Subversion.


Submodules
==========

--------------------
Additional Resources
--------------------

Hopefully this article has been useful in getting you up and running with Git.
If you want to find out more, the best resource is generally the excellent man
pages which come with Git. You can access these by running ``git help
<command>``, e.g.

::

  $ git help diff

If that doesn't help, then you might find the following web guides useful:

* http://learn.github.com/
* http://github.com/guides/home
* http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html
* http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
* http://book.git-scm.com/
* http://cworth.org/hgbook-git/tour/
* http://git.or.cz/course/svn.html
* http://www.spheredev.org/wiki/Git_for_the_lazy
* http://www-cs-students.stanford.edu/~blynn/gitmagic/

These cheatsheets in particular are rather invaluable:

* http://cheat.errtheblog.com/s/git
* http://git.or.cz/gitwiki/GitCheatSheet

You can find a bunch of useful user generated tips and screencasts on these
sites:

* http://gitready.com/
* http://gitcasts.com/

And, finally, of course, there's good old Google to fall back upon. Good luck
and happy cloning!

