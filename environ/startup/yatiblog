#! /usr/bin/env python2.6

"""
Yatiblog -- Blog/Documentation Generator

By default yatiblog will generate .html for source files in the given directory.

Usage: yatiblog [path/to/source/directory] [flags]

  --clean            Delete all generated files instead of generating .html files.
  --force            Force regeneration of ALL files irrespective of changes.
  --pdf=CSS_FILE     Generate .pdf files from the documentation with the CSS_FILE.
  --package=PACKAGE  Generate .html documentation for the given package.
  --sitedir=DIRNAME  The subdirectory for site config/output [default: website]
  --pdfdir=DIRNAME   The subdirectory for .pdf output [default: pdf]

For example:

  yatiblog /home/tav/blog pdf:/home/tav/blog/print.css package:plexnet

"""

from __future__ import print_function

import os
import sys

from fnmatch import filter as fnfilter
from os import stat, getcwd, listdir
from os.path import abspath, isabs, isdir, isfile, join as join_path

from plexnetenv import STARTUP_DIRECTORY
from plexnet.tool.article import main as generate_article

# ------------------------------------------------------------------------------
# some konstants
# ------------------------------------------------------------------------------

LATEST_FILENAME = '.latest'
SITEDIR = 'website'
PDFDIR = 'pdf'

ARTICLE_STORE = join_path(STARTUP_DIRECTORY, '.articlestore')

PDF_COMMAND = ['prince', '--input=html', '--output=pdf'] # --no-compress
MTIME_CACHE = {}

# ------------------------------------------------------------------------------
# utility funktions
# ------------------------------------------------------------------------------

def get_mtime(file, directory=None, usecache=True):
    """Return the last modified time of the given file."""
    if directory is not None:
        file = join_path(directory, *file.split('/')) # posixpath
    if usecache:
        if file in MTIME_CACHE:
            return MTIME_CACHE[file]
    try:
        mtime = stat(file).st_mtime
    except OSError:
        mtime = 0
    if usecache:
        return MTIME_CACHE.setdefault(file, mtime)
    return mtime

def touch(file):
    """Mimic the behaviour of the Unix ``touch`` utility."""
    if isfile(file):
        os.utime(file, None)
    else:
        open(file, 'wb').close()

def get_flag(flag, alter=True, default=True):
    """Return whether a specific flag is set in the command line parameters."""

    flagc = '%s=' % flag
    argv = []
    retval = None
    for arg in sys.argv:
        if arg == flag:
            retval = default
        elif arg.startswith(flagc):
            retval = arg.split(flagc, 1)[1] or default
        else:
            argv.append(arg)
    if alter:
        sys.argv[:] = argv
    if retval is None and default is not True:
        return default
    return retval

# ------------------------------------------------------------------------------
# kore generator
# ------------------------------------------------------------------------------

def generate_docs(site, force=False):

    #'asktav': ['asktav.com', TEXT, 1, None],
    #'plexnet': ['plexnet.org', DOCS, 0, 'plexnet'],
    #'turnupthecourage': ['turnupthecourage.com', TEXT, 1, None],

    PDF_CSS = join_path(WEBSITE_ROOT, 'static', 'css', 'print.css')
    HTML_GEN = ['-d', ARTICLE_STORE, '-r', PLEXNET_ROOT, '-a', AUTHORS]

    SITES = {
        # nick: [domain, source_dir, index_text, codegen]
        'asktav': ['asktav.com', TEXT, 1, None],
        'plexnet': ['plexnet.org', DOCS, 0, 'bootstrap'],
        'turnupthecourage': ['turnupthecourage.com', TEXT, 1, None],
        }

    AUTHORS = join_path(DOCS, 'CREDITS.txt')

    domain, source_dir, index_text, codegen = SITES[site]
    latest = get_mtime(LATEST_FILE)

    if index_text:
        source_file = open(join_path(source_dir, 'index.%s.txt' % site), 'rb')
        sources = [source.strip() for source in source_file.readlines()]
        source_file.close()
    else:
        sources = [
            source[:-4]
            for source in fnfilter(listdir(source_dir), '*.txt')
            ]

    modified = False

    template = join_path(TEMPLATE_DIR, '%s.genshi' % site)
    output_dir = join_path(WEBSITE_ROOT, domain)

    index_mtime = get_mtime(join_path(output_dir, 'index.html'))
    template_mtime = get_mtime(template)

    argv = HTML_GEN + ['-t', template, '-o', output_dir]

    if force:
        gensources = [
            join_path(source_dir, '%s.txt' % source)
            for source in sources
            ]
    else:
        gensources = []
        for source in sources:

            source_file = join_path(source_dir, '%s.txt' % source)
            dest_file = join_path(output_dir, '%s.html' % source)
            dest_mtime = get_mtime(dest_file)

            regen = 0

            if get_mtime(source_file) > dest_mtime:
                regen = 1
            elif template_mtime > dest_mtime:
                regen = 1

            if regen:
                gensources.append(source_file)
            elif dest_mtime > index_mtime:
                modified = True

    if gensources:
        _argv = argv[:]
        _argv.extend(gensources)
        generate_article(_argv)
        modified = True

    regen = 0

    if codegen:
        package_files = set(); add = package_files.add
        package_name = 'package.%s.html' % codegen
        package_mtime = get_mtime(join_path(output_dir, package_name))
        code_root = join_path(PLEXNET_SOURCE, codegen)
        for entry in listdir(code_root):
            path = join_path(code_root, entry)
            if isfile(path):
                if entry.endswith('.py'):
                    if get_mtime(path) > package_mtime:
                        regen = 1
                        break
            elif isdir(path):
                for entry2 in listdir(join_path(code_root, entry)):
                    path2 = join_path(code_root, entry, entry2)
                    if isfile(path2) and entry2.endswith('.py'):
                        if get_mtime(path2) > package_mtime:
                            regen = 1
                            break
        if regen or force:
            print
            print("---> generating CODE DOCUMENTATION for %r" % codegen)
            _argv = argv[:]
            _argv.extend(['-c', code_root])
            generate_article(_argv)
            modified = True
        
    if modified or (template_mtime > index_mtime) or force:
        print
        print("---> generating INDEX FILES for %r" % domain)
        _argv = argv[:]
        _argv.extend(['-p', output_dir])
        generate_article(_argv)

# ------------------------------------------------------------------------------
# main funktion
# ------------------------------------------------------------------------------

def error(message):
    print('\n' + ('-' * 70) + '\n')
    print("  !! %s !!" % message)
    print('\n' + ('-' * 70) + '\n')

def main():

    sys.argv = sys.argv[1:]

    help = get_flag('--help') or get_flag('help') or get_flag('-h')
    force = get_flag('--force')
    clean = get_flag('--clean')
    pdfs = get_flag('--pdf')
    package = get_flag('--package')
    sitedir = get_flag('--sitedir', default=SITEDIR)
    pdfdir = get_flag('--pdfdir', default=PDFDIR)

    if help:
        print(__doc__)
        sys.exit()

    if not sys.argv:
        error("A path to a directory with yatiblog text files wasn't given")
        sys.exit(1)

    LAST = len(sys.argv) - 1

    for idx, path in enumerate(sys.argv):

        path = abspath(path)

        if not isdir(path):
            error("%r doesn't exist" % path)
            sys.exit(1)

        if not isabs(sitedir):
            sitedir = join_path(path, sitedir)

        if not isdir(sitedir):
            print("Creating: %r" % sitedir)
            os.mkdir(sitedir)

        if not isabs(pdfdir):
            pdfdir = join_path(sitedir, pdfdir)

        if not isdir(pdfdir):
            print("Creating: %r" % pdfdir)
            os.mkdir(pdfdir)

        if clean:

             files = listdir(sitedir)

             for file in fnfilter(files, '*.html'):
                 file = join_path(sitedir, file)
                 print("Removing:", file)
                 os.remove(file)

             for file in fnfilter(files, '*.rss'):
                 file = join_path(sitedir, file)
                 print("Removing:", file)
                 os.remove(file)

             pdfs = listdir(pdfdir)

             for file in fnfilter(pdfs, '*.pdf'):
                 file = join_path(pdfdir, file)
                 print("Removing:", file)
                 os.remove(file)

             if isfile(ARTICLE_STORE):
                 print("Removing:", ARTICLE_STORE)
                 os.remove(ARTICLE_STORE)

             if idx == LAST:
                 sys.exit()

             continue

        print('hi')

#     for site in SITES:
#         generate_docs(site, force)
#     touch(LATEST_FILE)


# $(documentation_pdf_files): documentation/pdf/%.pdf: documentation/article/%.html $(template) $(pdf_css)
# 	@echo "---> generating" "$@"
# 	    $(prince) $$n --style=$(pdf_css) --output=$@; \

# ------------------------------------------------------------------------------
# self runner
# ------------------------------------------------------------------------------

if __name__ == '__main__':
    main()
